from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.command import CommandStart, CommandObject
from aiogram.utils.payload import decode_payload

from app.keyboards.keyboard_start import keyboard as keyboard_start
from app.core.settings import settings
from app.filters.chat_type import ChatTypeFilter
from app.filters.user_contact import UserContactFilter
from app.handlers.about import router as about_router
from app.handlers.contacts import router as contacts_router
from app.handlers.back_menu import router as back_menu_router
from app.handlers.consultation import router as consultation_router
from app.handlers.construction import router as construction_router

bot = Bot(
    token=settings.TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2),
)
dp = Dispatcher()
dp["started_at"] = datetime.now().strftime("%Y-%m-%d %H:%M")

dp.include_routers(back_menu_router)
dp.include_routers(consultation_router)
dp.include_routers(about_router)
dp.include_routers(contacts_router)
dp.include_routers(construction_router)


@dp.message(
    ChatTypeFilter(chat_type="private"),
    CommandStart(),
)
async def cmd_start(message: types.Message, command: CommandObject):
    try:
        payload = decode_payload(command.args)
    except:
        payload = None

    ...  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    hello_text = ...  # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑ –±–¥

    hello_text = (
        f"–Ø –±–æ—Ç –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–ò–Ω–°—Ç—Ä–æ–π¬ª\.\n\n"
        f"–Ø –ø–æ–º–æ–≥—É –ø—Ä–∏–∫–∏–Ω—É—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–º–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∂—É –æ –∫–æ–º–ø–∞–Ω–∏–∏, "
        f"—Å–≤—è–∂—É —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\.\n\n"
        f"–ù–∏–∂–µ –≤ –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ —Å —á–µ–≥–æ –±—ã –≤–∞–º —Ö–æ—Ç–µ–ª–æ—Å—å –Ω–∞—á–∞—Ç—å\.\n\n"
        f"*‚ö†Ô∏è –ï—Å–ª–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é –Ω–µ –≤–∏–¥–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∏–∫–æ–Ω–∫—É üéõ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É*"
    )
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name}\!\n\n{hello_text}",
        reply_markup=keyboard_start,
    )


@dp.message(UserContactFilter())
async def test(message: types.Message):
    print(message.contact)
    print(message.text)


async def main():
    while True:
        try:
            await dp.start_polling(bot)
        finally:
            print("end")
