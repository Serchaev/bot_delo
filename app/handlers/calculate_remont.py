from aiogram import Bot, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.filters.chat_type import ChatTypeFilter
from app.filters.user_contact import UserContactFilter
from app.keyboards import keyboard_return_phone, keyboard_start
from app.keyboards.keyboard_calculate_remont import keyboard_1, keyboard_2, keyboard_3, keyboard_4
from app.states.order_remont import CalculateRemont

router = Router()


@router.message(
    ChatTypeFilter(chat_type="private"),
    F.text == "–†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ üè°",
)
async def construction(message: Message, state: FSMContext):
    await message.answer(
        text="–ì–¥–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–º–æ–Ω—Ç?",
        reply_markup=keyboard_1,
        parse_mode=ParseMode.HTML,
    )
    await state.set_state(CalculateRemont.where_make_remont)


@router.message(
    CalculateRemont.where_make_remont,
    F.text.in_(("–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞", "–í—Ç–æ—Ä–∏—á–∫–∞", "–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º", "–î—Ä—É–≥–æ–µ")),
)
async def calculate_remont_1(message: Message, state: FSMContext):
    await state.update_data(**{"–ì–¥–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–º–æ–Ω—Ç?": message.text.lower()})
    await message.answer(
        text="–†–µ–º–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø–æ –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç—É?",
        reply_markup=keyboard_2,
    )
    await state.set_state(CalculateRemont.what_remont_planning)


@router.message(
    CalculateRemont.what_remont_planning,
    F.text.in_(
        (
            "–î–∞, –ø–æ –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç—É, —Ö–æ—á—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å",
            "–î–∞, –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç —É–∂–µ –≥–æ—Ç–æ–≤, –Ω—É–∂–µ–Ω —Ä–∞—Å—á–µ—Ç",
            "–†–µ–º–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä—É—é –±–µ–∑ –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞",
        )
    ),
)
async def calculate_remont_2(message: Message, state: FSMContext):
    await state.update_data(**{"–†–µ–º–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø–æ –¥–∏–∑–∞–π–Ω –ø—Ä–æ–µ–∫—Ç—É?": message.text.lower()})
    await message.answer(
        text="–°–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–µ?",
        reply_markup=keyboard_3,
    )
    await state.set_state(CalculateRemont.how_square_meters)


@router.message(
    CalculateRemont.how_square_meters,
    F.text.in_(("–æ—Ç 40 –¥–æ 60 –∫–≤.–º.", "–æ—Ç 60 –¥–æ 80 –∫–≤.–º.", "–æ—Ç 80 –¥–æ 100 –∫–≤.–º.", "–±–æ–ª–µ–µ 100 –∫–≤.–º.")),
)
async def calculate_remont_3(message: Message, state: FSMContext):
    await state.update_data(**{"–°–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –ø–æ–º–µ—â–µ–Ω–∏–µ?": message.text.lower()})
    await message.answer(
        text="–ö–ª—é—á–∏ –ø–æ–ª—É—á–∏–ª–∏?",
        reply_markup=keyboard_4,
    )
    await state.set_state(CalculateRemont.do_get_key)


@router.message(
    CalculateRemont.do_get_key,
    F.text.in_(("–î–∞", "–ù–µ—Ç")),
)
async def calculate_remont_4(message: Message, state: FSMContext):
    await state.update_data(**{"–ö–ª—é—á–∏ –ø–æ–ª—É—á–∏–ª–∏?": message.text.lower()})
    await message.answer(
        text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.",
        reply_markup=keyboard_return_phone.keyboard,
        parse_mode=None,
    )
    await state.set_state(CalculateRemont.contacts)


@router.message(
    CalculateRemont.contacts,
    UserContactFilter(),
)
async def food_chosen(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(
        **{"–ö–æ–Ω—Ç–∞–∫—Ç:": f"—Ç–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}, –∏–º—è: {message.contact.first_name}"}
    )
    user_data = await state.get_data()
    await state.clear()
    tmp = "\n".join((f"{key} - {value}" for key, value in user_data.items()))
    try:
        await bot.send_message(chat_id="-4157112517", text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{tmp}", parse_mode=None)
    except Exception as e:
        print(e)
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É")
    await message.answer(
        text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
        parse_mode=None,
        reply_markup=keyboard_start.keyboard,
    )
